{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helper.js","index.js"],"names":["Square","value","onClick","style","className","Board","squares","map","i","Game","useState","Array","fill","history","sethistory","stepNumber","setstepNumber","xisNext","setxisNext","winner","lines","length","a","b","c","calculateWinner","move_num","xO","jumpTo","step","won","historyPoint","slice","current","_step","move","destination","Alert","marginTop","icon","fontSize","action","Button","color","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b8d49f9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({ value, onClick }) => {\r\n\r\n  const style = value ? `squares ${value}`: `squares`\r\n\r\n  return (\r\n    <button className={style} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","import React from 'react'\r\nimport Square from './Square'\r\nconst Board = ({ squares, onClick }) => (\r\n    <div className=\"board\">\r\n      {squares.map((squares,i) => (\r\n                <Square key={i} value={squares} onClick={() => onClick(i)}/>\r\n                ))}\r\n                </div>\r\n  )\r\nexport default Board\r\n","import React, { useState } from 'react'\r\nimport { calculateWinner } from '../helper'\r\nimport Board from './Board'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst Game = () => {\r\n\r\n  const [history, sethistory] = useState([Array(9).fill(null)])\r\n  const [stepNumber, setstepNumber] = useState(0)\r\n  const [xisNext, setxisNext] = useState(true)\r\n  const winner = calculateWinner(history[stepNumber])\r\n  let move_num = 0\r\n  const xO = xisNext ? 'X' : 'O'\r\n\r\n  const handleClick = (i) => {\r\n    const historyPoint = history.slice(0,stepNumber+1)\r\n    const current = historyPoint[stepNumber]\r\n    const squares = [...current]\r\n    // return if won or occupied\r\n    if (winner || squares[i]) return \r\n    // select the square\r\n    squares[i] = xO\r\n    sethistory([...historyPoint,squares])\r\n    setstepNumber(historyPoint.length)\r\n    setxisNext(!xisNext)\r\n  }\r\n\r\n    const jumpTo = (step,won) => {\r\n      if(winner && won) \r\n      {\r\n        sethistory([Array(9).fill(null)])\r\n        setstepNumber(0)\r\n      }\r\n      else{\r\n        if(!won)\r\n        {\r\n          setstepNumber(step)\r\n          setxisNext(step%2 === 0 )\r\n        }\r\n        else\r\n        {\r\n          sethistory([Array(9).fill(null)])\r\n          setstepNumber(0)\r\n        }\r\n      }\r\n    }\r\n\r\n    const renderMove = () =>\r\n    history.map((_step, move) => {\r\n      const destination = move ? `Go to move #${move}` : 'Go to start'\r\n      move_num = move\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move,false)}>{destination}</button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n    const checkWinner = () => {\r\n      if(winner) {\r\n        return( \r\n        <Alert style={{ marginTop:'30px' }}  icon={<SentimentVerySatisfiedIcon fontSize=\"inherit\" />} action={\r\n          <Button onClick={()=>{jumpTo(0,true)}} color=\"inherit\" size=\"small\">\r\n            Play Again\r\n          </Button>\r\n        }>Winner is player  {winner} !</Alert>)\r\n      }\r\n      \r\n      else if( move_num===9)  return( \r\n        <Alert style={{ marginTop:'30px' }}  icon={<SentimentVeryDissatisfiedIcon fontSize=\"inherit\" />} action={\r\n          <Button onClick={()=>{jumpTo(0,true)}} color=\"inherit\" size=\"small\">\r\n            Play Again\r\n          </Button>\r\n        }>Match is Drawn  {winner} !</Alert>)\r\n      \r\n    }\r\n  return (\r\n    <>\r\n        <h1>React Tic Tac Toe- With Hooks</h1>\r\n    <div className=\"parent\">\r\n        <Board squares = {history[stepNumber]} onClick={handleClick}/>\r\n        <div className=\"info-wrapper\">\r\n          <div>\r\n            <h3>History</h3>\r\n            {renderMove()}\r\n          </div>\r\n          <h3>{winner ? 'Winner ' + winner : move_num===9? 'Match is Draw' : 'Next Player ' + xO}</h3>\r\n        </div>\r\n      </div>\r\n      {checkWinner()}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}